#!/usr/bin/env node

/**
 * Script para limpar notas √≥rf√£s da tabela relatorio_notas
 * Remove refer√™ncias para notas fiscais que n√£o existem mais
 */

const { createClient } = require('@supabase/supabase-js')

// Configura√ß√£o do Supabase (usar vari√°veis de ambiente ou fallback)
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://ehqxboqxtubeumaupjeq.supabase.co'
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVocXhib3F4dHViZXVtYXVwamVxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg3MzcyODQsImV4cCI6MjA3NDMxMzI4NH0.Er0IuDQeEtJ6AzFua_BAPFkcG_rmgg35QgdF0gpfwWw'

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Configura√ß√£o do Supabase n√£o encontrada')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function limparNotasOrfas() {
  try {
    console.log('üîç Iniciando limpeza de notas √≥rf√£s...')
    
    // 1. Buscar todas as refer√™ncias na tabela relatorio_notas
    console.log('üìã Buscando refer√™ncias na tabela relatorio_notas...')
    const { data: relatorioNotas, error: relatorioError } = await supabase
      .from('relatorio_notas')
      .select('nota_fiscal_id, relatorio_id')
    
    if (relatorioError) {
      console.error('‚ùå Erro ao buscar relatorio_notas:', relatorioError)
      return
    }
    
    if (!relatorioNotas || relatorioNotas.length === 0) {
      console.log('‚úÖ Nenhuma refer√™ncia encontrada na tabela relatorio_notas')
      return
    }
    
    console.log(`üìä Encontradas ${relatorioNotas.length} refer√™ncias`)
    
    // 2. Buscar todas as notas fiscais existentes
    console.log('üìã Buscando notas fiscais existentes...')
    const { data: notasFiscais, error: notasError } = await supabase
      .from('notas_fiscais')
      .select('id')
    
    if (notasError) {
      console.error('‚ùå Erro ao buscar notas_fiscais:', notasError)
      return
    }
    
    const idsExistentes = new Set(notasFiscais?.map(n => n.id) || [])
    console.log(`üìä Encontradas ${idsExistentes.size} notas fiscais existentes`)
    
    // 3. Identificar refer√™ncias √≥rf√£s
    const referenciasOrfas = relatorioNotas.filter(rn => !idsExistentes.has(rn.nota_fiscal_id))
    
    if (referenciasOrfas.length === 0) {
      console.log('‚úÖ Nenhuma refer√™ncia √≥rf√£ encontrada')
      return
    }
    
    console.log(`‚ö†Ô∏è Encontradas ${referenciasOrfas.length} refer√™ncias √≥rf√£s`)
    
    // 4. Agrupar por relat√≥rio para relat√≥rio
    const orfasPorRelatorio = {}
    referenciasOrfas.forEach(ref => {
      if (!orfasPorRelatorio[ref.relatorio_id]) {
        orfasPorRelatorio[ref.relatorio_id] = []
      }
      orfasPorRelatorio[ref.relatorio_id].push(ref.nota_fiscal_id)
    })
    
    console.log('üìä Refer√™ncias √≥rf√£s por relat√≥rio:')
    Object.entries(orfasPorRelatorio).forEach(([relatorioId, notas]) => {
      console.log(`   Relat√≥rio ${relatorioId}: ${notas.length} notas √≥rf√£s`)
    })
    
    // 5. Confirmar limpeza
    const readline = require('readline')
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    })
    
    const resposta = await new Promise((resolve) => {
      rl.question(`\nüóëÔ∏è Deseja remover ${referenciasOrfas.length} refer√™ncias √≥rf√£s? (s/N): `, resolve)
    })
    
    rl.close()
    
    if (resposta.toLowerCase() !== 's' && resposta.toLowerCase() !== 'sim') {
      console.log('‚ùå Opera√ß√£o cancelada pelo usu√°rio')
      return
    }
    
    // 6. Remover refer√™ncias √≥rf√£s
    console.log('üßπ Removendo refer√™ncias √≥rf√£s...')
    
    const notaIdsOrfas = referenciasOrfas.map(ref => ref.nota_fiscal_id)
    
    const { error: deleteError } = await supabase
      .from('relatorio_notas')
      .delete()
      .in('nota_fiscal_id', notaIdsOrfas)
    
    if (deleteError) {
      console.error('‚ùå Erro ao remover refer√™ncias √≥rf√£s:', deleteError)
      return
    }
    
    console.log(`‚úÖ ${referenciasOrfas.length} refer√™ncias √≥rf√£s removidas com sucesso!`)
    
    // 7. Relat√≥rio final
    console.log('\nüìä Relat√≥rio final:')
    console.log(`   Refer√™ncias removidas: ${referenciasOrfas.length}`)
    console.log(`   Relat√≥rios afetados: ${Object.keys(orfasPorRelatorio).length}`)
    
  } catch (error) {
    console.error('‚ùå Erro durante a limpeza:', error)
  }
}

async function verificarIntegridade() {
  try {
    console.log('üîç Verificando integridade dos dados...')
    
    // Buscar relat√≥rios com refer√™ncias √≥rf√£s
    const { data: relatorios, error: relatoriosError } = await supabase
      .from('relatorios')
      .select('id, nome')
    
    if (relatoriosError) {
      console.error('‚ùå Erro ao buscar relat√≥rios:', relatoriosError)
      return
    }
    
    console.log(`üìä Verificando ${relatorios.length} relat√≥rios...`)
    
    let totalOrfas = 0
    
    for (const relatorio of relatorios) {
      // Buscar refer√™ncias do relat√≥rio
      const { data: refs, error: refsError } = await supabase
        .from('relatorio_notas')
        .select('nota_fiscal_id')
        .eq('relatorio_id', relatorio.id)
      
      if (refsError) continue
      
      if (!refs || refs.length === 0) continue
      
      // Verificar quais existem
      const notaIds = refs.map(r => r.nota_fiscal_id)
      const { data: notasExistentes, error: notasError } = await supabase
        .from('notas_fiscais')
        .select('id')
        .in('id', notaIds)
      
      if (notasError) continue
      
      const idsExistentes = new Set(notasExistentes?.map(n => n.id) || [])
      const orfas = notaIds.filter(id => !idsExistentes.has(id))
      
      if (orfas.length > 0) {
        console.log(`‚ö†Ô∏è Relat√≥rio ${relatorio.nome} (${relatorio.id}): ${orfas.length} refer√™ncias √≥rf√£s`)
        totalOrfas += orfas.length
      }
    }
    
    if (totalOrfas === 0) {
      console.log('‚úÖ Nenhuma refer√™ncia √≥rf√£ encontrada')
    } else {
      console.log(`‚ö†Ô∏è Total de refer√™ncias √≥rf√£s: ${totalOrfas}`)
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error)
  }
}

// Fun√ß√£o principal
async function main() {
  const args = process.argv.slice(2)
  const comando = args[0]
  
  switch (comando) {
    case 'verificar':
    case 'check':
      await verificarIntegridade()
      break
    case 'limpar':
    case 'clean':
      await limparNotasOrfas()
      break
    default:
      console.log('üîß Script de limpeza de notas √≥rf√£s')
      console.log('')
      console.log('Uso:')
      console.log('  node scripts/limpar-notas-orfas.js verificar  - Verificar integridade')
      console.log('  node scripts/limpar-notas-orfas.js limpar    - Limpar refer√™ncias √≥rf√£s')
      console.log('')
      console.log('Exemplos:')
      console.log('  npm run limpar-orfas:check')
      console.log('  npm run limpar-orfas:clean')
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  main().catch(console.error)
}

module.exports = { limparNotasOrfas, verificarIntegridade }
