#!/usr/bin/env node

/**
 * Script para analisar dados dispon√≠veis para recupera√ß√£o
 * Verifica se as notas fiscais ainda existem e podem ser recuperadas
 */

const { createClient } = require('@supabase/supabase-js')

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://ehqxboqxtubeumaupjeq.supabase.co'
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVocXhib3F4dHViZXVtYXVwamVxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg3MzcyODQsImV4cCI6MjA3NDMxMzI4NH0.Er0IuDQeEtJ6AzFua_BAPFkcG_rmgg35QgdF0gpfwWw'

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Configura√ß√£o do Supabase n√£o encontrada')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function analisarDadosRecuperacao() {
  try {
    console.log('üîç Analisando dados dispon√≠veis para recupera√ß√£o...')
    
    // 1. Verificar relat√≥rios existentes
    console.log('\nüìã 1. ANALISANDO RELAT√ìRIOS...')
    const { data: relatorios, error: relatoriosError } = await supabase
      .from('relatorios')
      .select('id, nome, data, turno, area, quantidade_notas, created_at')
      .order('created_at', { ascending: false })
      .limit(50)
    
    if (relatoriosError) {
      console.error('‚ùå Erro ao buscar relat√≥rios:', relatoriosError)
      return
    }
    
    console.log(`üìä Total de relat√≥rios encontrados: ${relatorios.length}`)
    
    // 2. Verificar notas fiscais existentes
    console.log('\nüìã 2. ANALISANDO NOTAS FISCAIS...')
    const { data: notasFiscais, error: notasError } = await supabase
      .from('notas_fiscais')
      .select('id, numero_nf, data, status, created_at')
      .order('created_at', { ascending: false })
      .limit(100)
    
    if (notasError) {
      console.error('‚ùå Erro ao buscar notas fiscais:', notasError)
      return
    }
    
    console.log(`üìä Total de notas fiscais encontradas: ${notasFiscais.length}`)
    
    // 3. Verificar tabela relatorio_notas (deve estar vazia)
    console.log('\nüìã 3. ANALISANDO TABELA RELATORIO_NOTAS...')
    const { data: relatorioNotas, error: relatorioNotasError } = await supabase
      .from('relatorio_notas')
      .select('*')
      .limit(10)
    
    if (relatorioNotasError) {
      console.error('‚ùå Erro ao buscar relatorio_notas:', relatorioNotasError)
      return
    }
    
    console.log(`üìä Registros na tabela relatorio_notas: ${relatorioNotas?.length || 0}`)
    
    // 4. Verificar notas_bipadas (hist√≥rico de bipagem)
    console.log('\nüìã 4. ANALISANDO HIST√ìRICO DE BIPAGEM...')
    const { data: notasBipadas, error: notasBipadasError } = await supabase
      .from('notas_bipadas')
      .select('numero_nf, data, area_origem, created_at')
      .order('created_at', { ascending: false })
      .limit(100)
    
    if (notasBipadasError) {
      console.error('‚ùå Erro ao buscar notas_bipadas:', notasBipadasError)
    } else {
      console.log(`üìä Total de notas bipadas no hist√≥rico: ${notasBipadas?.length || 0}`)
    }
    
    // 5. An√°lise de compatibilidade de datas
    console.log('\nüìã 5. AN√ÅLISE DE COMPATIBILIDADE...')
    
    if (relatorios.length > 0 && notasFiscais.length > 0) {
      // Agrupar relat√≥rios por data
      const relatoriosPorData = {}
      relatorios.forEach(rel => {
        if (!relatoriosPorData[rel.data]) {
          relatoriosPorData[rel.data] = []
        }
        relatoriosPorData[rel.data].push(rel)
      })
      
      // Agrupar notas por data
      const notasPorData = {}
      notasFiscais.forEach(nota => {
        if (!notasPorData[nota.data]) {
          notasPorData[nota.data] = []
        }
        notasPorData[nota.data].push(nota)
      })
      
      console.log('üìä Relat√≥rios por data:')
      Object.entries(relatoriosPorData).forEach(([data, rels]) => {
        const notasNaData = notasPorData[data]?.length || 0
        const totalNotasEsperadas = rels.reduce((sum, r) => sum + (r.quantidade_notas || 0), 0)
        console.log(`   ${data}: ${rels.length} relat√≥rios, ${notasNaData} notas dispon√≠veis, ${totalNotasEsperadas} notas esperadas`)
      })
    }
    
    // 6. Verificar se h√° dados no campo 'notas' dos relat√≥rios
    console.log('\nüìã 6. VERIFICANDO DADOS EM MEM√ìRIA DOS RELAT√ìRIOS...')
    let relatoriosComNotasEmMemoria = 0
    let totalNotasEmMemoria = 0
    
    for (const relatorio of relatorios.slice(0, 10)) { // Verificar apenas os primeiros 10
      if (relatorio.notas && Array.isArray(relatorio.notas) && relatorio.notas.length > 0) {
        relatoriosComNotasEmMemoria++
        totalNotasEmMemoria += relatorio.notas.length
        console.log(`   ‚úÖ Relat√≥rio ${relatorio.nome}: ${relatorio.notas.length} notas em mem√≥ria`)
      }
    }
    
    console.log(`üìä Relat√≥rios com notas em mem√≥ria: ${relatoriosComNotasEmMemoria}`)
    console.log(`üìä Total de notas em mem√≥ria: ${totalNotasEmMemoria}`)
    
    // 7. Relat√≥rio final de viabilidade
    console.log('\nüìä RELAT√ìRIO DE VIABILIDADE DE RECUPERA√á√ÉO:')
    console.log('=' .repeat(60))
    
    const totalRelatorios = relatorios.length
    const totalNotasFiscais = notasFiscais.length
    const totalNotasBipadas = notasBipadas?.length || 0
    const totalNotasEsperadas = relatorios.reduce((sum, r) => sum + (r.quantidade_notas || 0), 0)
    
    console.log(`üìã Relat√≥rios afetados: ${totalRelatorios}`)
    console.log(`üìã Notas fiscais dispon√≠veis: ${totalNotasFiscais}`)
    console.log(`üìã Notas no hist√≥rico de bipagem: ${totalNotasBipadas}`)
    console.log(`üìã Total de notas esperadas: ${totalNotasEsperadas}`)
    console.log(`üìã Notas em mem√≥ria dos relat√≥rios: ${totalNotasEmMemoria}`)
    
    // Determinar viabilidade
    let viabilidade = 'BAIXA'
    let estrategia = 'Recupera√ß√£o limitada'
    
    if (totalNotasFiscais > 0 && totalNotasFiscais >= totalNotasEsperadas * 0.8) {
      viabilidade = 'ALTA'
      estrategia = 'Recupera√ß√£o completa via notas_fiscais'
    } else if (totalNotasBipadas > 0 && totalNotasBipadas >= totalNotasEsperadas * 0.8) {
      viabilidade = 'M√âDIA'
      estrategia = 'Recupera√ß√£o via hist√≥rico de bipagem'
    } else if (totalNotasEmMemoria > 0) {
      viabilidade = 'M√âDIA'
      estrategia = 'Recupera√ß√£o via dados em mem√≥ria dos relat√≥rios'
    }
    
    console.log(`\nüéØ VIABILIDADE: ${viabilidade}`)
    console.log(`üéØ ESTRAT√âGIA RECOMENDADA: ${estrategia}`)
    
    if (viabilidade === 'ALTA') {
      console.log('\n‚úÖ RECUPERA√á√ÉO RECOMENDADA:')
      console.log('   - As notas fiscais est√£o dispon√≠veis')
      console.log('   - Pode-se recriar os relacionamentos na tabela relatorio_notas')
      console.log('   - Alta probabilidade de sucesso')
    } else if (viabilidade === 'M√âDIA') {
      console.log('\n‚ö†Ô∏è RECUPERA√á√ÉO PARCIAL POSS√çVEL:')
      console.log('   - Alguns dados est√£o dispon√≠veis')
      console.log('   - Recupera√ß√£o parcial pode ser realizada')
      console.log('   - Recomenda-se an√°lise mais detalhada')
    } else {
      console.log('\n‚ùå RECUPERA√á√ÉO LIMITADA:')
      console.log('   - Poucos dados dispon√≠veis para recupera√ß√£o')
      console.log('   - Recomenda-se verificar backups externos')
      console.log('   - Foco em preven√ß√£o de futuras perdas')
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a an√°lise:', error)
  }
}

// Fun√ß√£o principal
async function main() {
  await analisarDadosRecuperacao()
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  main().catch(console.error)
}

module.exports = { analisarDadosRecuperacao }
