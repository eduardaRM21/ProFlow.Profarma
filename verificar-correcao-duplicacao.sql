-- =====================================================
-- SCRIPT PARA VERIFICAR SE AS CORRE√á√ïES FUNCIONARAM
-- Execute este script ap√≥s aplicar as corre√ß√µes
-- =====================================================

-- 1. Verificar se n√£o h√° mais duplica√ß√µes
SELECT 
    'üîç VERIFICA√á√ÉO FINAL - DUPLICA√á√ïES' as info,
    COUNT(*) as total_relacionamentos,
    COUNT(DISTINCT relatorio_id) as relatorios_unicos,
    COUNT(DISTINCT nota_fiscal_id) as notas_unicas,
    COUNT(*) - COUNT(DISTINCT (relatorio_id, nota_fiscal_id)) as duplicacoes_restantes
FROM relatorio_notas;

-- 2. Verificar constraint de unicidade
SELECT 
    'üîç VERIFICA√á√ÉO DA CONSTRAINT' as info,
    constraint_name,
    constraint_type,
    table_name
FROM information_schema.table_constraints 
WHERE table_name = 'relatorio_notas' 
AND constraint_type = 'UNIQUE';

-- 3. Verificar fun√ß√£o corrigida
SELECT 
    'üîç VERIFICA√á√ÉO DA FUN√á√ÉO' as info,
    routine_name,
    routine_type,
    routine_definition LIKE '%DISTINCT%' as tem_distinct
FROM information_schema.routines 
WHERE routine_name = 'sync_relatorio_data';

-- 4. Verificar triggers
SELECT 
    'üîç VERIFICA√á√ÉO DOS TRIGGERS' as info,
    trigger_name,
    event_manipulation,
    action_timing,
    event_object_table
FROM information_schema.triggers 
WHERE trigger_schema = 'public' 
AND event_object_table IN ('relatorio_notas', 'relatorio_colaboradores')
ORDER BY event_object_table, trigger_name;

-- 5. Teste de tentativa de duplica√ß√£o (deve falhar)
DO $$
DECLARE
    test_relatorio_id UUID;
    test_nota_fiscal_id UUID;
BEGIN
    -- Pegar um exemplo existente
    SELECT relatorio_id, nota_fiscal_id 
    INTO test_relatorio_id, test_nota_fiscal_id
    FROM relatorio_notas 
    LIMIT 1;
    
    IF test_relatorio_id IS NOT NULL AND test_nota_fiscal_id IS NOT NULL THEN
        BEGIN
            -- Tentar inserir duplica√ß√£o (deve falhar)
            INSERT INTO relatorio_notas (relatorio_id, nota_fiscal_id)
            VALUES (test_relatorio_id, test_nota_fiscal_id);
            
            RAISE NOTICE '‚ùå ERRO: Duplica√ß√£o foi inserida (constraint n√£o funcionou)';
        EXCEPTION
            WHEN unique_violation THEN
                RAISE NOTICE '‚úÖ SUCESSO: Constraint de unicidade funcionando corretamente';
            WHEN OTHERS THEN
                RAISE NOTICE '‚ö†Ô∏è AVISO: Erro inesperado: %', SQLERRM;
        END;
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è INFO: Nenhum dado encontrado para teste';
    END IF;
END $$;

-- 6. Resumo final
SELECT 
    CASE 
        WHEN (SELECT COUNT(*) - COUNT(DISTINCT (relatorio_id, nota_fiscal_id)) FROM relatorio_notas) = 0 
        THEN '‚úÖ SUCESSO: Nenhuma duplica√ß√£o encontrada'
        ELSE '‚ùå PROBLEMA: Ainda h√° duplica√ß√µes'
    END as status_duplicacoes,
    
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.table_constraints 
            WHERE table_name = 'relatorio_notas' AND constraint_type = 'UNIQUE'
        )
        THEN '‚úÖ SUCESSO: Constraint de unicidade ativa'
        ELSE '‚ùå PROBLEMA: Constraint de unicidade n√£o encontrada'
    END as status_constraint,
    
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.routines 
            WHERE routine_name = 'sync_relatorio_data' 
            AND routine_definition LIKE '%DISTINCT%'
        )
        THEN '‚úÖ SUCESSO: Fun√ß√£o corrigida com DISTINCT'
        ELSE '‚ùå PROBLEMA: Fun√ß√£o n√£o foi corrigida'
    END as status_funcao;
