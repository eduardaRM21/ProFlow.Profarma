import { getSupabase, retryWithBackoff, testSupabaseConnection } from './supabase-client'
import { convertDateToISO } from './utils'

// Tipos de dados
export interface SessionData {
  area: string
  colaboradores: string[]
  data: string
  turno: string
  loginTime: string
  usuarioCustos?: string
}

export interface NotaFiscal {
  id: string
  codigoCompleto: string
  data: string
  numeroNF: string
  volumes: number
  destino: string
  fornecedor: string
  clienteDestino: string
  tipoCarga: string
  timestamp: string
  status: string
  divergencia?: {
    volumesInformados: number
    observacoes: string
  }
}

export interface Carro {
  id: string
  nome: string
  destinoFinal: string
  nfs: NotaFiscal[]
  statusCarro: "aguardando_colagem" | "em_conferencia" | "liberado" | "embalando" | "em_producao"
  dataInicio: string
  ativo: boolean
  sessionId: string
}

export interface Relatorio {
  id?: string
  nome: string
  colaboradores: string[]
  data: string
  turno: string
  area: string
  quantidadeNotas: number
  somaVolumes: number
  notas: NotaFiscal[]
  dataFinalizacao: string
  status: string
}

export interface ChatMessage {
  id: string
  remetenteId: string
  remetenteNome: string
  remetenteTipo: 'colaborador' | 'adm' | 'sistema'
  destinatarioId: string
  mensagem: string
  timestamp: string // ISO
  lida?: boolean
}

export interface Conversa {
  id: string
  colaboradores: string[]
  data: string
  turno: string
  ultimaMensagem: string
  ultimoTimestamp: string
  mensagensNaoLidas: number
}
// === Helpers: cole no topo do arquivo (perto dos tipos) ===
function normalizeNF(nf: string | undefined) {
  const raw = (nf ?? "").trim();
  const digits = raw.replace(/\D/g, "");
  return {
    raw,
    withZeros: digits,                        // "003230827"
    withoutZeros: digits.replace(/^0+/, "") || "0", // "3230827"
  };
}

// Gera janela di√°ria em ISO (usa hor√°rio local do navegador)
function dayRangeBR(dateBR: string) {
  // dateBR no formato "dd/MM/yyyy"
  const [d, m, y] = dateBR.split("/").map(Number);
  const start = new Date(y, m - 1, d, 0, 0, 0);
  const end = new Date(y, m - 1, d + 1, 0, 0, 0);
  return { start: start.toISOString(), end: end.toISOString() };
}
// Servi√ßo de Sess√£o
export const SessionService = {
  // Salvar sess√£o
  async saveSession(sessionData: SessionData): Promise<string> {
    try {
      console.log('üíæ Tentando salvar sess√£o no banco...')
      console.log('üìä Dados da sess√£o:', JSON.stringify(sessionData, null, 2))
      
      // Validar dados obrigat√≥rios
      if (!sessionData.area || !sessionData.colaboradores || !sessionData.data || !sessionData.turno || !sessionData.loginTime) {
        throw new Error('Dados obrigat√≥rios da sess√£o est√£o faltando')
      }
      
      // Gerar ID √∫nico para a sess√£o baseado na √°rea, data, turno e timestamp
      const sessionId = `session_${sessionData.area}_${sessionData.data.replace(/\//g, '-')}_${sessionData.turno}_${Date.now()}`
      
      // Converter data para formato ISO se estiver no formato brasileiro
      let dataFormatada = sessionData.data
      if (sessionData.data && sessionData.data.includes('/')) {
        dataFormatada = convertDateToISO(sessionData.data)
        console.log('üìÖ Data da sess√£o convertida de', sessionData.data, 'para', dataFormatada)
      }
      
      // Preparar dados para o banco
      const sessionPayload = {
        id: sessionId,
        colaboradores: sessionData.colaboradores,
        data: dataFormatada,
        turno: sessionData.turno,
        area: sessionData.area,
        login_time: sessionData.loginTime,
        updated_at: new Date().toISOString()
      }
      
      console.log('üì§ Payload para o banco:', JSON.stringify(sessionPayload, null, 2))
      
      const { error } = await retryWithBackoff(async () => {
        return await getSupabase()
          .from('sessions')
          .upsert(sessionPayload)
      })

      if (error) {
        console.error('‚ùå Erro ao salvar sess√£o:', error)
        console.error('‚ùå Detalhes do erro:', JSON.stringify(error, null, 2))
        throw error
      }
      
      console.log('‚úÖ Sess√£o salva com sucesso no banco')
      return sessionId
    } catch (error) {
      console.error('‚ùå Erro ao salvar sess√£o:', error)
      throw error
    }
  },

  // Carregar sess√£o
  async getSession(sessionId: string): Promise<SessionData | null> {
    try {
      console.log('üîç SessionService.getSession chamado com sessionId:', sessionId)
      console.log('üîç Tentando buscar sess√£o no banco...')
      
      const isConnected = await testSupabaseConnection()
      console.log('üåê Status da conectividade:', { isConnected })
      
      if (!isConnected) {
        console.log('‚ö†Ô∏è Sem conectividade com Supabase, usando fallback')
        return null
      }
      
      const knownAreas = ['recebimento', 'embalagem', 'inventario', 'custos']
      const filterByArea = knownAreas.includes(sessionId) // Check if sessionId is a known area
      console.log('üîç Filtro por √°rea:', { sessionId, filterByArea, knownAreas })

      const { data, error } = await retryWithBackoff(async () => {
        let query = getSupabase()
          .from('sessions')
          .select('*')
          .order('updated_at', { ascending: false })
          .limit(1)

        if (filterByArea) { // Apply filter if it's a known area
          console.log('üîç Aplicando filtro por √°rea:', sessionId)
          query = query.eq('area', sessionId)
        }
        
        console.log('üîç Executando query...')
        const result = await query.maybeSingle()
        console.log('üìä Resultado da query:', result)
        return result
      })

      if (error) {
        console.error('‚ùå Erro ao buscar sess√£o:', error)
        return null
      }

      if (!data) {
        console.log('‚ö†Ô∏è Nenhuma sess√£o encontrada no banco')
        return null
      }

      console.log('‚úÖ Sess√£o encontrada no banco:', data.area)
      console.log('üìä Dados completos da sess√£o:', data)
      
      const sessionData = {
        colaboradores: data.colaboradores as string[],
        data: data.data as string,
        turno: data.turno as string,
        area: data.area as string,
        loginTime: data.login_time as string
      }
      
      console.log('üìã Sess√£o mapeada:', sessionData)
      return sessionData
    } catch (error) {
      console.error('‚ùå Erro ao carregar sess√£o:', error)
      return null
    }
  },

  // Deletar sess√£o
  async deleteSession(sessionId: string): Promise<void> {
    try {
      const { error } = await retryWithBackoff(async () => {
        return await getSupabase()
          .from('sessions')
          .delete()
          .eq('id', sessionId)
      })

      if (error) throw error
    } catch (error) {
      console.error('Erro ao deletar sess√£o:', error)
      throw error
    }
  }
}

// Servi√ßo de Recebimento
export const RecebimentoService = {
  // Salvar notas de recebimento
  async saveNotas(sessionId: string, notas: NotaFiscal[]): Promise<void> {
    try {
      console.log('üíæ Tentando salvar notas no banco...')
      
      // Primeiro, verificar se j√° existe um registro para esta sess√£o
      const { data: existingData, error: checkError } = await retryWithBackoff(async () => {
        return await getSupabase()
          .from('recebimento_notas')
          .select('id, notas')
          .eq('session_id', sessionId)
          .maybeSingle()
      })

      if (checkError && !checkError.message?.includes('relation "recebimento_notas" does not exist')) {
        console.error('‚ùå Erro ao verificar notas existentes:', checkError)
        throw checkError
      }

      if (existingData) {
        // Se j√° existe, fazer update
        console.log('üìù Atualizando notas existentes para sess√£o:', sessionId)
        const { error } = await retryWithBackoff(async () => {
          return await getSupabase()
            .from('recebimento_notas')
            .update({
              notas: notas,
              updated_at: new Date().toISOString()
            })
            .eq('session_id', sessionId)
        })

        if (error) {
          console.error('‚ùå Erro ao atualizar notas de recebimento:', error)
          throw error
        }
      } else {
        // Se n√£o existe, fazer insert
        console.log('‚ûï Inserindo novas notas para sess√£o:', sessionId)
        const { error } = await retryWithBackoff(async () => {
          return await getSupabase()
            .from('recebimento_notas')
            .insert({
              session_id: sessionId,
              notas: notas,
              updated_at: new Date().toISOString()
            })
        })

        if (error) {
          console.error('‚ùå Erro ao inserir notas de recebimento:', error)
          throw error
        }
      }
      
      console.log('‚úÖ Notas salvas com sucesso no banco')
    } catch (error) {
      console.error('‚ùå Erro ao salvar notas de recebimento:', error)
      throw error
    }
  },

  // Carregar notas de recebimento
  async getNotas(sessionId: string): Promise<NotaFiscal[]> {
    try {
      console.log('üìã Tentando carregar notas do banco...')
      const { data, error } = await retryWithBackoff(async () => {
        return await getSupabase()
          .from('recebimento_notas')
          .select('notas')
          .eq('session_id', sessionId)
          .maybeSingle()
      })

      if (error) {
        console.error('‚ùå Erro ao buscar notas de recebimento:', error)
        
        // Se for erro de tabela n√£o encontrada, retornar array vazio
        if (error.message?.includes('relation "recebimento_notas" does not exist')) {
          console.log('‚ùå Tabela recebimento_notas n√£o existe no banco')
          return []
        }
        
        throw error
      }

      if (data && data.notas) {
        const notas = data.notas as NotaFiscal[] | null
        console.log('‚úÖ Notas encontradas no banco:', notas?.length || 0, 'notas')
        return notas || []
      }

      console.log('‚ÑπÔ∏è Nenhuma nota encontrada para esta sess√£o')
      return []
    } catch (error) {
      console.error('‚ùå Erro ao carregar notas de recebimento:', error)
      return []
    }
  },

  // Deletar notas de recebimento
  async deleteNotas(sessionId: string): Promise<void> {
    try {
      console.log('üóëÔ∏è Tentando deletar notas do banco para sess√£o:', sessionId)
      
      const { error } = await retryWithBackoff(async () => {
        return await getSupabase()
          .from('recebimento_notas')
          .delete()
          .eq('session_id', sessionId)
      })

      if (error) {
        // Se for erro de tabela n√£o encontrada, n√£o √© um erro cr√≠tico
        if (error.message?.includes('relation "recebimento_notas" does not exist')) {
          console.log('‚ÑπÔ∏è Tabela recebimento_notas n√£o existe no banco')
          return
        }
        throw error
      }
      
      console.log('‚úÖ Notas deletadas com sucesso do banco')
    } catch (error) {
      console.error('‚ùå Erro ao deletar notas de recebimento:', error)
      throw error
    }
  }
}

// Servi√ßo de Embalagem (Carros)
export const EmbalagemService = {
  // Salvar carros
  async saveCarros(sessionId: string, carros: Carro[]): Promise<void> {
    try {
      console.log('üíæ Tentando salvar carros no banco...')
      
      // Primeiro, verificar se j√° existe um registro para esta sess√£o
      const { data: existingData, error: checkError } = await retryWithBackoff(async () => {
        return await getSupabase()
          .from('embalagem_carros')
          .select('id, carros')
          .eq('session_id', sessionId)
          .maybeSingle()
      })

      if (checkError && !checkError.message?.includes('relation "embalagem_carros" does not exist')) {
        console.error('‚ùå Erro ao verificar carros existentes:', checkError)
        throw checkError
      }

      if (existingData) {
        // Se j√° existe, fazer update
        console.log('üìù Atualizando carros existentes para sess√£o:', sessionId)
        const { error } = await retryWithBackoff(async () => {
          return await getSupabase()
            .from('embalagem_carros')
            .update({
              carros: carros,
              updated_at: new Date().toISOString()
            })
            .eq('session_id', sessionId)
        })

        if (error) {
          console.error('‚ùå Erro ao atualizar carros:', error)
          throw error
        }
      } else {
        // Se n√£o existe, fazer insert
        console.log('‚ûï Inserindo novos carros para sess√£o:', sessionId)
        const { error } = await retryWithBackoff(async () => {
          return await getSupabase()
            .from('embalagem_carros')
            .insert({
              session_id: sessionId,
              carros: carros,
              updated_at: new Date().toISOString()
            })
        })

        if (error) {
          console.error('‚ùå Erro ao inserir carros:', error)
          throw error
        }
      }
      
      console.log('‚úÖ Carros salvos com sucesso no banco')
    } catch (error) {
      console.error('‚ùå Erro ao salvar carros:', error)
      throw error
    }
  },

  // Carregar carros
  async getCarros(sessionId: string): Promise<Carro[]> {
    try {
      console.log('üìã Tentando carregar carros do banco...')
      const { data, error } = await retryWithBackoff(async () => {
        return await getSupabase()
          .from('embalagem_carros')
          .select('carros')
          .eq('session_id', sessionId)
          .maybeSingle()
      })

      if (error) {
        console.error('‚ùå Erro ao buscar carros:', error)
        
        // Se for erro de tabela n√£o encontrada, retornar array vazio
        if (error.message?.includes('relation "embalagem_carros" does not exist')) {
          console.log('‚ùå Tabela embalagem_carros n√£o existe no banco')
          return []
        }
        
        throw error
      }

      if (data && data.carros) {
        const carros = data.carros as Carro[] | null
        console.log('‚úÖ Carros encontrados no banco:', carros?.length || 0, 'carros')
        return carros || []
      }

      console.log('‚ÑπÔ∏è Nenhum carro encontrado para esta sess√£o')
      return []
    } catch (error) {
      console.error('‚ùå Erro ao carregar carros:', error)
      return []
    }
  },

  // Salvar carros finalizados
  async saveCarrosFinalizados(carros: Carro[]): Promise<void> {
    try {
      const { error } = await retryWithBackoff(async () => {
        return await getSupabase()
          .from('embalagem_carros_finalizados')
          .insert({
            carros: carros,
            created_at: new Date().toISOString()
          })
      })

      if (error) throw error
    } catch (error) {
      console.error('Erro ao salvar carros finalizados:', error)
      throw error
    }
  },

  // Carregar carros finalizados
  async getCarrosFinalizados(): Promise<Carro[]> {
    try {
      const { data, error } = await retryWithBackoff(async () => {
        return await getSupabase()
          .from('embalagem_carros_finalizados')
          .select('carros')
          .order('created_at', { ascending: false })
      })

      if (error) throw error

      return data?.flatMap((item: any) => (item.carros as Carro[]) || []) || []
    } catch (error) {
      console.error('Erro ao carregar carros finalizados:', error)
      return []
    }
  }
}

// Servi√ßo de Relat√≥rios
export const RelatoriosService = {
  // Atualizar apenas o status do relat√≥rio (mais eficiente)
  async updateRelatorioStatus(relatorioId: string, novoStatus: string): Promise<void> {
    try {
      console.log('üîÑ Atualizando status do relat√≥rio:', relatorioId, 'para:', novoStatus)
      
      const supabase = getSupabase()
      
      const { error } = await supabase
        .from('relatorios')
        .update({ 
          status: novoStatus,
          updated_at: new Date().toISOString()
        })
        .eq('id', relatorioId)
      
      if (error) {
        console.error('‚ùå Erro ao atualizar status do relat√≥rio:', error)
        throw error
      }
      
      console.log('‚úÖ Status do relat√≥rio atualizado com sucesso')
    } catch (error) {
      console.error('‚ùå Erro ao atualizar status do relat√≥rio:', error)
      throw error
    }
  },

  // Salvar relat√≥rio
  async saveRelatorio(relatorio: Relatorio): Promise<void> {
    try {
      console.log('üíæ Tentando salvar relat√≥rio no banco...')
      console.log('üîç Dados do relat√≥rio recebido:', relatorio)
      
      // Converter data para formato ISO se estiver no formato brasileiro
      let dataFormatada = relatorio.data
      if (relatorio.data && relatorio.data.includes('/')) {
        dataFormatada = convertDateToISO(relatorio.data)
        console.log('üìÖ Data convertida de', relatorio.data, 'para', dataFormatada)
      }
      
      const supabase = getSupabase()
      console.log('üîç Cliente Supabase obtido:', !!supabase)
      
      // 1. Salvar o relat√≥rio principal
      console.log('üîç Salvando relat√≥rio principal...')
      const { data: relatorioData, error: relatorioError } = await retryWithBackoff(async () => {
        const payload = {
          nome: relatorio.nome,
          data: dataFormatada,
          turno: relatorio.turno,
          area: relatorio.area,
          quantidade_notas: relatorio.quantidadeNotas,
          soma_volumes: relatorio.somaVolumes,
          data_finalizacao: relatorio.dataFinalizacao,
          status: relatorio.status,
          created_at: new Date().toISOString()
        }
        
        console.log('üîç Payload do relat√≥rio:', payload)

        if (relatorio.id) {
          // Atualiza√ß√£o - incluir ID e usar upsert
          console.log('üîç Atualizando relat√≥rio existente...')
          return await supabase
            .from('relatorios')
            .upsert({ ...payload, id: relatorio.id })
            .select()
        } else {
          // Novo relat√≥rio - n√£o incluir ID, usar insert
          console.log('üîç Criando novo relat√≥rio...')
          return await supabase
            .from('relatorios')
            .insert(payload)
            .select()
        }
      })
      
      if (relatorioError) {
        console.error('‚ùå Erro ao salvar relat√≥rio:', relatorioError)
        throw relatorioError
      }
      
      console.log('üîç Relat√≥rio salvo, resposta:', relatorioData)
      
      // Obter o ID do relat√≥rio salvo
      const relatorioId = relatorio.id || relatorioData?.[0]?.id
      if (!relatorioId) {
        throw new Error('N√£o foi poss√≠vel obter o ID do relat√≥rio salvo')
      }
      
      console.log('‚úÖ Relat√≥rio principal salvo com ID:', relatorioId)
      
      // 2. Salvar colaboradores na tabela relatorio_colaboradores
      if (relatorio.colaboradores && Array.isArray(relatorio.colaboradores) && relatorio.colaboradores.length > 0) {
        console.log('üíæ Salvando colaboradores...')
        console.log('üîç Colaboradores recebidos:', relatorio.colaboradores)
        
        // Primeiro, buscar os IDs dos usu√°rios pelos nomes
        const colaboradoresIds = await Promise.all(
          relatorio.colaboradores.map(async (nomeColaborador: string) => {
            console.log(`üîç Buscando usu√°rio: ${nomeColaborador}`)
            
            // Buscar usu√°rio pelo nome
            const { data: userData, error: userError } = await supabase
              .from('users')
              .select('id')
              .eq('nome', nomeColaborador)
              .eq('area', 'recebimento')
              .single()
            
            console.log(`üîç Resultado busca usu√°rio ${nomeColaborador}:`, { userData, userError })
            
            if (userError || !userData) {
              console.log(`‚ö†Ô∏è Usu√°rio n√£o encontrado: ${nomeColaborador}, criando...`)
              
              // Criar usu√°rio se n√£o existir
              const { data: newUser, error: createUserError } = await supabase
                .from('users')
                .insert({
                  nome: nomeColaborador,
                  area: 'recebimento',
                  email: `${nomeColaborador.toLowerCase().replace(/\s+/g, '.')}@profarma.com`
                })
                .select()
                .single()
              
              if (createUserError) {
                console.error(`‚ùå Erro ao criar usu√°rio ${nomeColaborador}:`, createUserError)
                return null
              }
              
              console.log(`‚úÖ Usu√°rio criado: ${nomeColaborador} com ID: ${newUser.id}`)
              return newUser.id
            }
            
            console.log(`‚úÖ Usu√°rio encontrado: ${nomeColaborador} com ID: ${userData.id}`)
            return userData.id
          })
        )
        
        console.log('üîç IDs dos colaboradores obtidos:', colaboradoresIds)
        
        // Filtrar IDs v√°lidos
        const idsValidos = colaboradoresIds.filter(id => id !== null)
        console.log('üîç IDs v√°lidos filtrados:', idsValidos)
        
        if (idsValidos.length > 0) {
          // Salvar relacionamentos na tabela relatorio_colaboradores
          const colaboradoresRelacionamentos = idsValidos.map(userId => ({
            relatorio_id: relatorioId,
            user_id: userId
          }))
          
          console.log('üîç Relacionamentos a serem salvos:', colaboradoresRelacionamentos)
          
          const { error: colaboradoresError } = await supabase
            .from('relatorio_colaboradores')
            .insert(colaboradoresRelacionamentos)
          
          if (colaboradoresError) {
            console.error('‚ùå Erro ao salvar colaboradores:', colaboradoresError)
          } else {
            console.log('‚úÖ Colaboradores salvos:', colaboradoresRelacionamentos.length)
          }
        } else {
          console.log('‚ö†Ô∏è Nenhum ID v√°lido de colaborador encontrado')
        }
      } else {
        console.log('‚ö†Ô∏è Nenhum colaborador para salvar ou formato inv√°lido:', relatorio.colaboradores)
      }
      
      // 3. Salvar notas na tabela relatorio_notas
      if (relatorio.notas && Array.isArray(relatorio.notas) && relatorio.notas.length > 0) {
        console.log('üíæ Salvando notas...')
        console.log('üîç Notas recebidas:', relatorio.notas)
        
        // Verificar se j√° existem notas associadas a este relat√≥rio
        const { data: notasExistentes, error: checkError } = await supabase
          .from('relatorio_notas')
          .select('nota_fiscal_id')
          .eq('relatorio_id', relatorioId)
        
        if (checkError) {
          console.error('‚ùå Erro ao verificar notas existentes:', checkError)
        } else {
          console.log('üîç Notas j√° associadas ao relat√≥rio:', notasExistentes?.length || 0)
        }
        
        // Obter IDs das notas j√° associadas
        const notasExistentesIds = new Set(notasExistentes?.map(n => n.nota_fiscal_id) || [])
        
        // Salvar todas as notas na tabela notas_fiscais
        const notasSalvas = await Promise.all(
          relatorio.notas.map(async (nota: any, index: number) => {
            console.log(`üîç Processando nota ${index + 1}:`, nota)
            
            try {
              // Verificar se a nota j√° existe na tabela notas_fiscais
              const { data: notaExistente, error: buscaError } = await supabase
                .from('notas_fiscais')
                .select('id')
                .eq('numero_nf', nota.numeroNF)
                .eq('codigo_completo', nota.codigoCompleto || '')
                .single()
              
              let notaId: string
              
              if (buscaError || !notaExistente) {
                // Nota n√£o existe, criar nova
                console.log(`üîç Criando nova nota fiscal: ${nota.numeroNF}`)
                const { data: notaSalva, error: notaError } = await supabase
                  .from('notas_fiscais')
                  .insert({
                    codigo_completo: nota.codigoCompleto || '',
                    numero_nf: nota.numeroNF,
                    data: dataFormatada,
                    volumes: nota.volumes,
                    destino: nota.destino,
                    fornecedor: nota.fornecedor,
                    cliente_destino: nota.clienteDestino,
                    tipo_carga: nota.tipoCarga,
                    status: nota.status || 'ok'
                  })
                  .select()
                  .single()
                
                if (notaError) {
                  console.error(`‚ùå Erro ao salvar nota fiscal ${index + 1}:`, notaError)
                  return null
                }
                
                notaId = notaSalva.id
                console.log(`‚úÖ Nova nota fiscal ${index + 1} criada com ID: ${notaId}`)
              } else {
                // Nota j√° existe, atualizar status se necess√°rio
                notaId = notaExistente.id
                console.log(`‚úÖ Nota fiscal ${index + 1} j√° existe com ID: ${notaId}`)
                
                // Atualizar o status da nota se ela tem diverg√™ncia
                if (nota.divergencia) {
                  const { error: updateError } = await supabase
                    .from('notas_fiscais')
                    .update({ status: 'divergencia' })
                    .eq('id', notaId)
                  
                  if (updateError) {
                    console.error(`‚ùå Erro ao atualizar status da nota ${index + 1}:`, updateError)
                  } else {
                    console.log(`‚úÖ Status da nota ${index + 1} atualizado para "divergencia"`)
                  }
                } else if (nota.status === 'ok') {
                  const { error: updateError } = await supabase
                    .from('notas_fiscais')
                    .update({ status: 'ok' })
                    .eq('id', notaId)
                  
                  if (updateError) {
                    console.error(`‚ùå Erro ao atualizar status da nota ${index + 1}:`, updateError)
                  } else {
                    console.log(`‚úÖ Status da nota ${index + 1} atualizado para "ok"`)
                  }
                }
              }
              
              return { ...nota, id: notaId }
            } catch (error) {
              console.error(`‚ùå Erro ao processar nota ${index + 1}:`, error)
              return null
            }
          })
        )
        
        console.log('üîç Notas processadas:', notasSalvas)
        
        // Filtrar notas v√°lidas
        const notasValidas = notasSalvas.filter(nota => nota !== null)
        console.log('üîç Notas v√°lidas filtradas:', notasValidas)
        
        if (notasValidas.length > 0) {
          // Filtrar apenas notas que ainda n√£o est√£o associadas ao relat√≥rio
          const notasNovas = notasValidas.filter(nota => !notasExistentesIds.has(nota.id))
          console.log('üîç Notas novas para associar:', notasNovas.length)
          
          if (notasNovas.length > 0) {
            // Salvar relacionamentos na tabela relatorio_notas apenas para notas novas
            const notasRelacionamentos = notasNovas.map(nota => ({
              relatorio_id: relatorioId,
              nota_fiscal_id: nota.id
            }))
            
            console.log('üîç Relacionamentos de notas a serem salvos:', notasRelacionamentos)
            
            const { error: notasError } = await supabase
              .from('relatorio_notas')
              .insert(notasRelacionamentos)
            
            if (notasError) {
              console.error('‚ùå Erro ao salvar relacionamentos de notas:', notasError)
            } else {
              console.log('‚úÖ Relacionamentos de notas salvos:', notasRelacionamentos.length)
            }
          } else {
            console.log('‚úÖ Todas as notas j√° est√£o associadas ao relat√≥rio')
          }
          
          // Salvar diverg√™ncias se houver (para todas as notas com diverg√™ncia)
          const divergencias = notasValidas
            .filter(nota => nota.divergencia)
            .map(nota => ({
              nota_fiscal_id: nota.id,
              tipo: 'volumes',
              descricao: 'Diverg√™ncia de volumes',
              volumes_informados: nota.divergencia.volumesInformados,
              volumes_reais: nota.volumes,
              observacoes: nota.divergencia.observacoes
            }))
          
          if (divergencias.length > 0) {
            console.log('üîç Salvando diverg√™ncias:', divergencias)
            
            // Verificar se as diverg√™ncias j√° existem antes de inserir
            const divergenciasParaSalvar = await Promise.all(
              divergencias.map(async (divergencia) => {
                const { data: divergenciaExistente, error: checkError } = await supabase
                  .from('divergencias')
                  .select('id')
                  .eq('nota_fiscal_id', divergencia.nota_fiscal_id)
                  .single()
                
                if (checkError || !divergenciaExistente) {
                  return divergencia
                } else {
                  console.log(`‚ÑπÔ∏è Diverg√™ncia j√° existe para nota ${divergencia.nota_fiscal_id}`)
                  return null
                }
              })
            )
            
            const divergenciasNovas = divergenciasParaSalvar.filter(d => d !== null)
            
            if (divergenciasNovas.length > 0) {
              const { error: divergenciasError } = await supabase
                .from('divergencias')
                .insert(divergenciasNovas)
              
              if (divergenciasError) {
                console.error('‚ùå Erro ao salvar diverg√™ncias:', divergenciasError)
              } else {
                console.log('‚úÖ Diverg√™ncias salvas:', divergenciasNovas.length)
              }
            } else {
              console.log('‚ÑπÔ∏è Todas as diverg√™ncias j√° existem')
            }
          }
        } else {
          console.log('‚ö†Ô∏è Nenhuma nota v√°lida para salvar')
        }
      } else {
        console.log('‚ö†Ô∏è Nenhuma nota para salvar ou formato inv√°lido:', relatorio.notas)
      }
      
      console.log('‚úÖ Relat√≥rio completo salvo com sucesso no banco')
    } catch (error) {
      console.error('‚ùå Erro ao salvar relat√≥rio:', error)
      throw error
    }
  },

  // Carregar relat√≥rios
  async getRelatorios(): Promise<Relatorio[]> {
    try {
      console.log('üìã Tentando carregar relat√≥rios do banco...')
      const { data, error } = await retryWithBackoff(async () => {
        return await getSupabase()
          .from('relatorios')
          .select('*')
          .order('created_at', { ascending: false })
      })

      if (error) {
        console.error('‚ùå Erro ao buscar relat√≥rios:', error)
        
        // Se for erro de recursos insuficientes, retornar array vazio
        if (error.message?.includes('insufficient') || error.message?.includes('resources')) {
          console.log('‚ö†Ô∏è Recursos insuficientes no banco, retornando array vazio')
          return []
        }
        
        // Se for erro de tabela n√£o encontrada, retornar array vazio
        if (error.message?.includes('relation "relatorios" does not exist')) {
          console.log('‚ùå Tabela relatorios n√£o existe no banco')
          return []
        }
        
        throw error
      }

      if (data) {
        console.log('‚úÖ Relat√≥rios carregados do banco:', data.length, 'relat√≥rios')
        console.log('üîç Dados brutos do banco:', data)
        
        if (data.length > 0) {
          console.log('üîç Primeiro item bruto:', data[0])
          console.log('üîç Campos dispon√≠veis:', Object.keys(data[0]))
        }
        
        const relatorios: Relatorio[] = (data ?? []).map((item: any) => ({
          id: item.id,
          nome: item.nome ?? 'Relat√≥rio sem nome',
          colaboradores: item.colaboradores ?? [],
          data: item.data,
          turno: item.turno,
          area: item.area ?? 'custos',
          quantidadeNotas: item.quantidade_notas ?? 0,
          somaVolumes: item.soma_volumes ?? 0,
          notas: item.notas ?? [],
          dataFinalizacao: item.data_finalizacao ?? new Date().toISOString(),
          status: item.status ?? 'liberado',
        }))
        
        console.log('‚úÖ Relat√≥rios carregados do banco:', relatorios.length)
        return relatorios
      } else {
        console.log('‚ÑπÔ∏è Nenhum relat√≥rio encontrado no banco')
        return []
      }
    } catch (error) {
      console.error('‚ùå Erro ao carregar relat√≥rios:', error)
      return []
    }
  }
}

// Servi√ßo de Chat
export const ChatService = {
  // INSERT correto
  async saveMensagem(m: ChatMessage): Promise<void> {
    const { error } = await retryWithBackoff(async () =>
      getSupabase().from('messages').insert({
        id: m.id,
        remetente_id: m.remetenteId,
        remetente_nome: m.remetenteNome,
        remetente_tipo: m.remetenteTipo,
        destinatario_id: m.destinatarioId,
        mensagem: m.mensagem,
        timestamp: m.timestamp,
        lida: m.lida ?? false,
        created_at: new Date().toISOString(),
      })
    )
    if (error) throw error
  },

  // SELECT (conversa por √°rea)
  async getMensagens(area: string): Promise<ChatMessage[]> {
    const { data, error } = await retryWithBackoff(async () =>
      getSupabase()
        .from('messages')
        .select('*')
        .eq('area', area)
        .order('timestamp', { ascending: true })
    )
    if (error) throw error
    return (data ?? []).map((it: any) => ({
      id: it.id,
      remetenteId: it.remetente_id,
      remetenteNome: it.remetente_nome,
      remetenteTipo: it.remetente_tipo,
      destinatarioId: it.destinatario_id,
      mensagem: it.mensagem,
      timestamp: it.timestamp,
      lida: it.lida,
    }))
  },

  // Marcar mensagens como lidas
  async markAsRead(conversaId: string, remetenteTipo: string): Promise<void> {
    try {
      const { error } = await retryWithBackoff(async () => {
        return await getSupabase()
          .from('messages')
          .update({ lida: true })
          .eq('destinatario_id', conversaId)
          .eq('remetente_tipo', remetenteTipo)
          .eq('lida', false)
      })

      if (error) throw error
    } catch (error) {
      console.error('Erro ao marcar mensagens como lidas:', error)
      throw error
    }
  },

  // Contar mensagens n√£o lidas
  async countUnreadMessages(conversaId: string, remetenteTipo: string): Promise<number> {
    try {
      const { count, error } = await retryWithBackoff(async () => {
        return await getSupabase()
          .from('messages')
          .select('*', { count: 'exact', head: true })
          .eq('destinatario_id', conversaId)
          .eq('remetente_tipo', remetenteTipo)
          .eq('lida', false)
      })

      if (error) throw error

      return count || 0
    } catch (error) {
      console.error('Erro ao contar mensagens n√£o lidas:', error)
      return 0
    }
  },

  // Validar se uma NF foi bipada no recebimento (para uso na embalagem)
  async validateNFForEmbalagem(numeroNF: string, data: string, turno: string): Promise<{ valido: boolean; nota?: NotaFiscal; erro?: string }> {
    try {
      console.log(`üîç Validando NF ${numeroNF} para embalagem - Data: ${data}, Turno: ${turno}`)
      
      // Normalizar o n√∫mero da NF (com e sem zeros √† esquerda)
      const normalizedNF = normalizeNF(numeroNF)
      console.log(`üìù NF normalizada:`, normalizedNF)
      
      // Gerar janela di√°ria para buscar NFs recebidas
      const dayRange = dayRangeBR(data)
      console.log(`üìÖ Janela di√°ria: ${dayRange.start} at√© ${dayRange.end}`)
      
      // PRIMEIRA TENTATIVA: Buscar nas sess√µes de recebimento ativas
      console.log('üîç Buscando NF nas sess√µes de recebimento ativas...')
      let notaEncontrada: NotaFiscal | undefined
      
      try {
        // Buscar todas as sess√µes de recebimento do dia
        const { data: sessions, error: sessionsError } = await retryWithBackoff(async () => {
          return await getSupabase()
            .from('sessions')
            .select('id')
            .eq('area', 'recebimento')
            .eq('data', data)
            .eq('turno', turno)
        })
        
        if (!sessionsError && sessions && sessions.length > 0) {
          console.log(`üìã Encontradas ${sessions.length} sess√µes de recebimento ativas`)
          
          // Buscar NFs em todas as sess√µes de recebimento do dia/turno
          const sessionIds = sessions.map(s => s.id)
          const { data: recebimentoData, error: recebimentoError } = await retryWithBackoff(async () => {
            return await getSupabase()
              .from('recebimento_notas')
              .select('notas')
              .in('session_id', sessionIds)
          })
          
          if (!recebimentoError && recebimentoData && recebimentoData.length > 0) {
            // Procurar pela NF em todas as sess√µes
            for (const recebimento of recebimentoData) {
              if (recebimento.notas && Array.isArray(recebimento.notas)) {
                // Procurar por diferentes formatos da NF
                const nota = recebimento.notas.find((n: NotaFiscal) => 
                  n.numeroNF === numeroNF || 
                  n.numeroNF === normalizedNF.withZeros || 
                  n.numeroNF === normalizedNF.withoutZeros ||
                  n.codigoCompleto.includes(numeroNF) ||
                  n.codigoCompleto.includes(normalizedNF.withZeros) ||
                  n.codigoCompleto.includes(normalizedNF.withoutZeros)
                )
                
                                 if (nota) {
                   notaEncontrada = nota
                   console.log(`‚úÖ NF ${numeroNF} encontrada na sess√£o ativa`)
                   break
                 }
              }
            }
          }
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao buscar nas sess√µes ativas, tentando relat√≥rios:', error)
      }
      
      // SEGUNDA TENTATIVA: Se n√£o encontrou nas sess√µes, buscar nos relat√≥rios finalizados
      if (!notaEncontrada) {
        console.log('üîç NF n√£o encontrada nas sess√µes ativas, buscando nos relat√≥rios finalizados...')
        
        try {
          const { data: relatoriosData, error: relatoriosError } = await retryWithBackoff(async () => {
            return await getSupabase()
              .from('relatorios')
              .select('*')
              .eq('area', 'recebimento')
              .eq('data', data)
              .eq('turno', turno)
              .eq('status', 'liberado')
          })
          
          if (!relatoriosError && relatoriosData && relatoriosData.length > 0) {
            console.log(`üìã Encontrados ${relatoriosData.length} relat√≥rios finalizados de recebimento`)
            
            // Procurar pela NF em todos os relat√≥rios
            for (const relatorio of relatoriosData) {
              if (relatorio.notas && Array.isArray(relatorio.notas)) {
                console.log(`ÔøΩÔøΩ Verificando relat√≥rio: ${relatorio.nome} (${relatorio.notas.length} NFs)`)
                
                // Procurar por diferentes formatos da NF
                const nota = relatorio.notas.find((n: NotaFiscal) => 
                  n.numeroNF === numeroNF || 
                  n.numeroNF === normalizedNF.withZeros || 
                  n.numeroNF === normalizedNF.withoutZeros ||
                  n.codigoCompleto.includes(numeroNF) ||
                  n.codigoCompleto.includes(normalizedNF.withZeros) ||
                  n.codigoCompleto.includes(normalizedNF.withoutZeros)
                )
                
                if (nota) {
                  notaEncontrada = nota
                  console.log(`‚úÖ NF ${numeroNF} encontrada no relat√≥rio finalizado: ${relatorio.nome}`)
                  break
                }
              }
            }
          } else if (relatoriosError) {
            console.warn('‚ö†Ô∏è Erro ao buscar relat√≥rios:', relatoriosError)
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro ao buscar nos relat√≥rios:', error)
        }
      }
      
      // TERCEIRA TENTATIVA: Buscar em relat√≥rios de outros dias (√∫ltimos 7 dias)
      if (!notaEncontrada) {
        console.log('üîç NF n√£o encontrada nos relat√≥rios do dia, buscando em relat√≥rios dos √∫ltimos 7 dias...')
        
        try {
          // Calcular data de 7 dias atr√°s
          const dataAtual = new Date()
          const data7DiasAtras = new Date(dataAtual.getTime() - (7 * 24 * 60 * 60 * 1000))
          const dataFormatada = data7DiasAtras.toLocaleDateString('pt-BR')
          
          const { data: relatoriosAntigosData, error: relatoriosAntigosError } = await retryWithBackoff(async () => {
            return await getSupabase()
              .from('relatorios')
              .select('*')
              .eq('area', 'recebimento')
              .eq('status', 'liberado')
              .gte('data', dataFormatada)
              .order('data', { ascending: false })
              .limit(50) // Limitar a 50 relat√≥rios para performance
          })
          
          if (!relatoriosAntigosError && relatoriosAntigosData && relatoriosAntigosData.length > 0) {
            console.log(`üìã Verificando ${relatoriosAntigosData.length} relat√≥rios dos √∫ltimos 7 dias`)
            
            // Procurar pela NF em todos os relat√≥rios antigos
            for (const relatorio of relatoriosAntigosData) {
              if (relatorio.notas && Array.isArray(relatorio.notas)) {
                // Procurar por diferentes formatos da NF
                const nota = relatorio.notas.find((n: NotaFiscal) => 
                  n.numeroNF === numeroNF || 
                  n.numeroNF === normalizedNF.withZeros || 
                  n.numeroNF === normalizedNF.withoutZeros ||
                  n.codigoCompleto.includes(numeroNF) ||
                  n.codigoCompleto.includes(normalizedNF.withZeros) ||
                  n.codigoCompleto.includes(normalizedNF.withoutZeros)
                )
                
                if (nota) {
                  notaEncontrada = nota
                  console.log(`‚úÖ NF ${numeroNF} encontrada no relat√≥rio antigo: ${relatorio.nome} (${relatorio.data} - ${relatorio.turno})`)
                  break
                }
              }
            }
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro ao buscar relat√≥rios antigos:', error)
        }
      }
      
      if (notaEncontrada) {
        console.log(`‚úÖ NF ${numeroNF} validada com sucesso para embalagem`)
        return { 
          valido: true, 
          nota: notaEncontrada 
        }
      } else {
        console.log(`‚ùå NF ${numeroNF} n√£o encontrada em nenhum lugar`)
        return { 
          valido: false, 
          erro: `NF ${numeroNF} n√£o foi bipada no Recebimento. Verifique se a NF foi processada e o relat√≥rio foi finalizado.` 
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao validar NF para embalagem:', error)
      return { 
        valido: false, 
        erro: `Erro interno ao validar NF: ${error instanceof Error ? error.message : 'Erro desconhecido'}` 
      }
    }
  }
}

// Fun√ß√£o para migrar dados do localStorage para o banco
export const migrateFromLocalStorage = async () => {
  try {
    console.log('üîÑ Iniciando migra√ß√£o do localStorage para o banco...')

    // Verificar se h√° dados para migrar
    const hasData = Array.from({ length: localStorage.length }, (_, i) => {
      const key = localStorage.key(i)
      return key && (
        key.startsWith('recebimento_') ||
        key.startsWith('embalagem_') ||
        key === 'sistema_session' ||
        key === 'relatorios_custos' ||
        key === 'profarma_carros_embalagem'
      )
    }).some(Boolean)

    if (!hasData) {
      console.log('‚ÑπÔ∏è Nenhum dado encontrado no localStorage para migrar')
      return
    }

    // Migrar sess√µes
    const sessionData = localStorage.getItem('sistema_session')
    if (sessionData) {
      try {
        const session = JSON.parse(sessionData)
        await SessionService.saveSession(session)
        console.log('‚úÖ Sess√£o migrada com sucesso')
      } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao migrar sess√£o:', error)
        // Continuar com outras migra√ß√µes
      }
    }

    // Migrar notas de recebimento
    let recebimentoCount = 0
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i)
      if (key?.startsWith('recebimento_')) {
        try {
          const notas = JSON.parse(localStorage.getItem(key) || '[]')
          if (notas.length > 0) {
            await RecebimentoService.saveNotas(key, notas)
            recebimentoCount++
            console.log(`‚úÖ Notas de recebimento migradas: ${key}`)
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erro ao migrar notas de recebimento ${key}:`, error)
          // Continuar com outras migra√ß√µes
        }
      }
    }
    console.log(`üìä Total de sess√µes de recebimento migradas: ${recebimentoCount}`)

    // Migrar carros de embalagem
    const carrosData = localStorage.getItem('profarma_carros_embalagem')
    if (carrosData) {
      try {
        const carros = JSON.parse(carrosData)
        if (carros.length > 0) {
          await EmbalagemService.saveCarrosFinalizados(carros)
          console.log('‚úÖ Carros de embalagem migrados com sucesso')
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao migrar carros de embalagem:', error)
        // Continuar com outras migra√ß√µes
      }
    }

    // Migrar relat√≥rios
    const relatoriosData = localStorage.getItem('relatorios_custos')
    if (relatoriosData) {
      try {
        const relatorios = JSON.parse(relatoriosData)
        let relatoriosCount = 0
        for (const relatorio of relatorios) {
          try {
            await RelatoriosService.saveRelatorio(relatorio)
            relatoriosCount++
          } catch (error) {
            console.warn(`‚ö†Ô∏è Erro ao migrar relat√≥rio ${relatorio.id}:`, error)
            // Continuar com outros relat√≥rios
          }
        }
        console.log(`üìä Total de relat√≥rios migrados: ${relatoriosCount}`)
      } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao migrar relat√≥rios:', error)
        // Continuar com outras migra√ß√µes
      }
    }

    console.log('‚úÖ Migra√ß√£o conclu√≠da com sucesso!')
  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error)
    throw error
  }
}
